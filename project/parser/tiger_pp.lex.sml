(*#line 20.10 "tiger_pp.lex"*)functor TigerLexFun(structure Tokens : Tiger_TOKENS)(*#line 1.1 "tiger_pp.lex.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "tiger_pp.lex"*)type pos = int

type svalue = Tokens.svalue
type ('a, 'b) token = ('a, 'b) Tokens.token
type lexresult = (svalue, pos) token

val lineNo = ref 0
val posInLine = ref 0

exception SyntaxError

fun inc ref_x = ref_x := !ref_x + 1
fun inc_n ref_x n = ref_x := !ref_x + n
fun reset ref_x = ref_x := 0

fun eof () = Tokens.EOF (!lineNo, !posInLine)

(*#line 23.1 "tiger_pp.lex.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\003\003\003\003\003\003\003\003\003\050\049\003\003\003\003\003\
\\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\
\\047\003\043\003\003\003\042\003\041\040\039\038\003\037\003\036\
\\034\034\034\034\034\034\034\034\034\034\003\033\030\029\027\003\
\\003\005\005\005\005\005\005\005\005\005\005\005\005\005\005\005\
\\005\005\005\005\005\005\005\005\005\005\005\003\003\003\003\003\
\\003\005\005\005\025\021\005\005\005\019\005\005\005\005\016\005\
\\005\005\005\005\012\005\005\007\005\005\005\003\004\003\003\003\
\\003"
),
 (5, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (7, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\008\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (8, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\009\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (9, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\010\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (10, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\011\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\013\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (13, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\014\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (14, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\015\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\017\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (17, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\018\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\020\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\022\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\023\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (23, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\024\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\026\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (27, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (30, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\032\031\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (34, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\035\035\035\035\035\035\035\035\035\035\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (43, 
"\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\
\\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\
\\044\044\000\044\044\044\044\044\044\044\044\044\044\044\044\044\
\\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\
\\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\
\\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\
\\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\
\\044\044\044\045\044\044\044\044\044\044\044\044\044\044\044\044\
\\044"
),
 (45, 
"\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\
\\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\
\\044\044\046\044\044\044\044\044\044\044\044\044\044\044\044\044\
\\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\
\\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\
\\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\
\\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\
\\044\044\044\045\044\044\044\044\044\044\044\044\044\044\044\044\
\\044"
),
 (47, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\048\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\051\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = List.map f (List.rev (tl (List.rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(List.map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [(N 79)], trans = 0},
{fin = [(N 71),(N 79)], trans = 0},
{fin = [(N 44),(N 79)], trans = 5},
{fin = [(N 44)], trans = 5},
{fin = [(N 44),(N 79)], trans = 7},
{fin = [(N 44)], trans = 8},
{fin = [(N 44)], trans = 9},
{fin = [(N 44)], trans = 10},
{fin = [(N 38),(N 44)], trans = 5},
{fin = [(N 44),(N 79)], trans = 12},
{fin = [(N 44)], trans = 13},
{fin = [(N 44)], trans = 14},
{fin = [(N 27),(N 44)], trans = 5},
{fin = [(N 44),(N 79)], trans = 16},
{fin = [(N 44)], trans = 17},
{fin = [(N 19),(N 44)], trans = 5},
{fin = [(N 44),(N 79)], trans = 19},
{fin = [(N 22),(N 44)], trans = 5},
{fin = [(N 44),(N 79)], trans = 21},
{fin = [(N 44)], trans = 22},
{fin = [(N 44)], trans = 23},
{fin = [(N 32),(N 44)], trans = 5},
{fin = [(N 44),(N 79)], trans = 25},
{fin = [(N 41),(N 44)], trans = 5},
{fin = [(N 65),(N 79)], trans = 27},
{fin = [(N 60)], trans = 0},
{fin = [(N 54),(N 79)], trans = 0},
{fin = [(N 67),(N 79)], trans = 30},
{fin = [(N 57)], trans = 0},
{fin = [(N 63)], trans = 0},
{fin = [(N 77),(N 79)], trans = 0},
{fin = [(N 10),(N 79)], trans = 34},
{fin = [(N 10)], trans = 34},
{fin = [(N 52),(N 79)], trans = 0},
{fin = [(N 48),(N 79)], trans = 0},
{fin = [(N 46),(N 79)], trans = 0},
{fin = [(N 50),(N 79)], trans = 0},
{fin = [(N 75),(N 79)], trans = 0},
{fin = [(N 73),(N 79)], trans = 0},
{fin = [(N 69),(N 79)], trans = 0},
{fin = [(N 79)], trans = 43},
{fin = [], trans = 43},
{fin = [], trans = 45},
{fin = [(N 15)], trans = 0},
{fin = [(N 4),(N 79)], trans = 47},
{fin = [(N 4)], trans = 47},
{fin = [(N 1)], trans = 0},
{fin = [(N 7),(N 79)], trans = 50},
{fin = [(N 7)], trans = 50}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = String.substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  1 => ((*#line 29.8 "tiger_pp.lex"*)let 
        val _ = inc lineNo
        val _ = reset posInLine
    in
        lex()
    end(*#line 405.1 "tiger_pp.lex.sml"*)
)
| 10 => let val yytext=yymktext() in (*#line 48.14 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.INT (yytext, !lineNo, !posInLine)
    end(*#line 411.1 "tiger_pp.lex.sml"*)
 end
| 15 => let val yytext=yymktext() in (*#line 54.22 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.STR (yytext, !lineNo, !posInLine)
    end(*#line 417.1 "tiger_pp.lex.sml"*)
 end
| 19 => let val yytext=yymktext() in (*#line 60.11 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.NIL (!lineNo, !posInLine)
    end(*#line 423.1 "tiger_pp.lex.sml"*)
 end
| 22 => let val yytext=yymktext() in (*#line 66.10 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.IF (!lineNo, !posInLine)
    end(*#line 429.1 "tiger_pp.lex.sml"*)
 end
| 27 => let val yytext=yymktext() in (*#line 72.12 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.THEN (!lineNo, !posInLine)
    end(*#line 435.1 "tiger_pp.lex.sml"*)
 end
| 32 => let val yytext=yymktext() in (*#line 78.12 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.ELSE (!lineNo, !posInLine)
    end(*#line 441.1 "tiger_pp.lex.sml"*)
 end
| 38 => let val yytext=yymktext() in (*#line 84.13 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.WHILE (!lineNo, !posInLine)
    end(*#line 447.1 "tiger_pp.lex.sml"*)
 end
| 4 => let val yytext=yymktext() in (*#line 36.14 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        lex()
    end(*#line 453.1 "tiger_pp.lex.sml"*)
 end
| 41 => let val yytext=yymktext() in (*#line 90.10 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.DO (!lineNo, !posInLine)
    end(*#line 459.1 "tiger_pp.lex.sml"*)
 end
| 44 => let val yytext=yymktext() in (*#line 96.14 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.ID (yytext, !lineNo, !posInLine)
    end(*#line 465.1 "tiger_pp.lex.sml"*)
 end
| 46 => let val yytext=yymktext() in (*#line 102.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.ADD (!lineNo, !posInLine)
    end(*#line 471.1 "tiger_pp.lex.sml"*)
 end
| 48 => let val yytext=yymktext() in (*#line 108.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.SUB (!lineNo, !posInLine)
    end(*#line 477.1 "tiger_pp.lex.sml"*)
 end
| 50 => let val yytext=yymktext() in (*#line 114.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.MUL (!lineNo, !posInLine)
    end(*#line 483.1 "tiger_pp.lex.sml"*)
 end
| 52 => let val yytext=yymktext() in (*#line 120.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.DIV (!lineNo, !posInLine)
    end(*#line 489.1 "tiger_pp.lex.sml"*)
 end
| 54 => let val yytext=yymktext() in (*#line 126.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.EQ (!lineNo, !posInLine)
    end(*#line 495.1 "tiger_pp.lex.sml"*)
 end
| 57 => let val yytext=yymktext() in (*#line 132.10 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.NE (!lineNo, !posInLine)
    end(*#line 501.1 "tiger_pp.lex.sml"*)
 end
| 60 => let val yytext=yymktext() in (*#line 138.10 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.GE (!lineNo, !posInLine)
    end(*#line 507.1 "tiger_pp.lex.sml"*)
 end
| 63 => let val yytext=yymktext() in (*#line 144.10 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.LE (!lineNo, !posInLine)
    end(*#line 513.1 "tiger_pp.lex.sml"*)
 end
| 65 => let val yytext=yymktext() in (*#line 150.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.G (!lineNo, !posInLine)
    end(*#line 519.1 "tiger_pp.lex.sml"*)
 end
| 67 => let val yytext=yymktext() in (*#line 157.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.L (!lineNo, !posInLine)
    end(*#line 525.1 "tiger_pp.lex.sml"*)
 end
| 69 => let val yytext=yymktext() in (*#line 163.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.AND (!lineNo, !posInLine)
    end(*#line 531.1 "tiger_pp.lex.sml"*)
 end
| 7 => let val yytext=yymktext() in (*#line 42.17 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (8 * (size yytext))
    in
        lex()
    end(*#line 537.1 "tiger_pp.lex.sml"*)
 end
| 71 => let val yytext=yymktext() in (*#line 170.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.OR (!lineNo, !posInLine)
    end(*#line 543.1 "tiger_pp.lex.sml"*)
 end
| 73 => let val yytext=yymktext() in (*#line 176.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.LEFT_B (!lineNo, !posInLine)
    end(*#line 549.1 "tiger_pp.lex.sml"*)
 end
| 75 => let val yytext=yymktext() in (*#line 182.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.RIGHT_B (!lineNo, !posInLine)
    end(*#line 555.1 "tiger_pp.lex.sml"*)
 end
| 77 => let val yytext=yymktext() in (*#line 188.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.SEMI (!lineNo, !posInLine)
    end(*#line 561.1 "tiger_pp.lex.sml"*)
 end
| 79 => ((*#line 194.7 "tiger_pp.lex"*)let
    val _ = print ("Syntax error on line " ^ (Int.toString (!lineNo)) ^ " and " ^ (Int.toString (!posInLine)) ^ " char\n")
    in
        raise SyntaxError
    end(*#line 567.1 "tiger_pp.lex.sml"*)
)
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (String.size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := String.substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := String.size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if String.substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
