(*#line 20.10 "tiger_pp.lex"*)functor TigerLexFun(structure Tokens : Tiger_TOKENS)(*#line 1.1 "tiger_pp.lex.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "tiger_pp.lex"*)type pos = int

type svalue = Tokens.svalue
type ('a, 'b) token = ('a, 'b) Tokens.token
type lexresult = (svalue, pos) token

val lineNo = ref 0
val posInLine = ref 0

exception SyntaxError

fun inc ref_x = ref_x := !ref_x + 1
fun inc_n ref_x n = ref_x := !ref_x + n
fun reset ref_x = ref_x := 0

fun eof () = Tokens.EOF (!lineNo, !posInLine)

(*#line 23.1 "tiger_pp.lex.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\003\003\003\003\003\003\003\003\003\056\055\003\003\003\003\003\
\\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\
\\053\003\049\003\003\003\048\003\047\046\045\044\003\043\003\042\
\\040\040\040\040\040\040\040\040\040\040\038\037\034\033\031\003\
\\003\005\005\005\005\005\005\005\005\005\005\005\005\005\005\005\
\\005\005\005\005\005\005\005\005\005\005\005\003\003\003\003\003\
\\003\005\005\005\029\025\022\005\005\020\005\005\005\005\017\005\
\\005\005\005\005\012\005\005\007\005\005\005\003\004\003\003\003\
\\003"
),
 (5, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (7, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\008\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (8, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\009\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (9, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\010\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (10, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\011\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\014\006\006\006\006\006\006\013\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (14, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\015\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\016\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (17, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\018\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (18, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\019\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\021\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\023\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (23, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\024\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\026\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (26, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\027\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (27, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\028\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\030\
\\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\
\\000"
),
 (31, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (34, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\036\035\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (38, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (40, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\041\041\041\041\041\041\041\041\041\041\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (49, 
"\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\
\\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\
\\050\050\000\050\050\050\050\050\050\050\050\050\050\050\050\050\
\\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\
\\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\
\\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\
\\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\
\\050\050\050\051\050\050\050\050\050\050\050\050\050\050\050\050\
\\050"
),
 (51, 
"\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\
\\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\
\\050\050\052\050\050\050\050\050\050\050\050\050\050\050\050\050\
\\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\
\\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\
\\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\
\\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\050\
\\050\050\050\051\050\050\050\050\050\050\050\050\050\050\050\050\
\\050"
),
 (53, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\054\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (56, 
"\000\000\000\000\000\000\000\000\000\057\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = List.map f (List.rev (tl (List.rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(List.map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [(N 89)], trans = 0},
{fin = [(N 81),(N 89)], trans = 0},
{fin = [(N 54),(N 89)], trans = 5},
{fin = [(N 54)], trans = 5},
{fin = [(N 54),(N 89)], trans = 7},
{fin = [(N 54)], trans = 8},
{fin = [(N 54)], trans = 9},
{fin = [(N 54)], trans = 10},
{fin = [(N 38),(N 54)], trans = 5},
{fin = [(N 54),(N 89)], trans = 12},
{fin = [(N 51),(N 54)], trans = 5},
{fin = [(N 54)], trans = 14},
{fin = [(N 54)], trans = 15},
{fin = [(N 27),(N 54)], trans = 5},
{fin = [(N 54),(N 89)], trans = 17},
{fin = [(N 54)], trans = 18},
{fin = [(N 19),(N 54)], trans = 5},
{fin = [(N 54),(N 89)], trans = 20},
{fin = [(N 22),(N 54)], trans = 5},
{fin = [(N 54),(N 89)], trans = 22},
{fin = [(N 54)], trans = 23},
{fin = [(N 45),(N 54)], trans = 5},
{fin = [(N 54),(N 89)], trans = 25},
{fin = [(N 54)], trans = 26},
{fin = [(N 54)], trans = 27},
{fin = [(N 32),(N 54)], trans = 5},
{fin = [(N 54),(N 89)], trans = 29},
{fin = [(N 41),(N 54)], trans = 5},
{fin = [(N 75),(N 89)], trans = 31},
{fin = [(N 70)], trans = 0},
{fin = [(N 64),(N 89)], trans = 0},
{fin = [(N 77),(N 89)], trans = 34},
{fin = [(N 67)], trans = 0},
{fin = [(N 73)], trans = 0},
{fin = [(N 87),(N 89)], trans = 0},
{fin = [(N 89)], trans = 38},
{fin = [(N 48)], trans = 0},
{fin = [(N 10),(N 89)], trans = 40},
{fin = [(N 10)], trans = 40},
{fin = [(N 62),(N 89)], trans = 0},
{fin = [(N 58),(N 89)], trans = 0},
{fin = [(N 56),(N 89)], trans = 0},
{fin = [(N 60),(N 89)], trans = 0},
{fin = [(N 85),(N 89)], trans = 0},
{fin = [(N 83),(N 89)], trans = 0},
{fin = [(N 79),(N 89)], trans = 0},
{fin = [(N 89)], trans = 49},
{fin = [], trans = 49},
{fin = [], trans = 51},
{fin = [(N 15)], trans = 0},
{fin = [(N 4),(N 89)], trans = 53},
{fin = [(N 4)], trans = 53},
{fin = [(N 1)], trans = 0},
{fin = [(N 7),(N 89)], trans = 56},
{fin = [(N 7)], trans = 56}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = String.substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  1 => ((*#line 29.8 "tiger_pp.lex"*)let 
        val _ = inc lineNo
        val _ = reset posInLine
    in
        lex()
    end(*#line 444.1 "tiger_pp.lex.sml"*)
)
| 10 => let val yytext=yymktext() in (*#line 48.14 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.INT (yytext, !lineNo, !posInLine)
    end(*#line 450.1 "tiger_pp.lex.sml"*)
 end
| 15 => let val yytext=yymktext() in (*#line 54.22 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.STR (yytext, !lineNo, !posInLine)
    end(*#line 456.1 "tiger_pp.lex.sml"*)
 end
| 19 => let val yytext=yymktext() in (*#line 60.11 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.NIL (!lineNo, !posInLine)
    end(*#line 462.1 "tiger_pp.lex.sml"*)
 end
| 22 => let val yytext=yymktext() in (*#line 66.10 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.IF (!lineNo, !posInLine)
    end(*#line 468.1 "tiger_pp.lex.sml"*)
 end
| 27 => let val yytext=yymktext() in (*#line 72.12 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.THEN (!lineNo, !posInLine)
    end(*#line 474.1 "tiger_pp.lex.sml"*)
 end
| 32 => let val yytext=yymktext() in (*#line 78.12 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.ELSE (!lineNo, !posInLine)
    end(*#line 480.1 "tiger_pp.lex.sml"*)
 end
| 38 => let val yytext=yymktext() in (*#line 84.13 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.WHILE (!lineNo, !posInLine)
    end(*#line 486.1 "tiger_pp.lex.sml"*)
 end
| 4 => let val yytext=yymktext() in (*#line 36.14 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        lex()
    end(*#line 492.1 "tiger_pp.lex.sml"*)
 end
| 41 => let val yytext=yymktext() in (*#line 90.10 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.DO (!lineNo, !posInLine)
    end(*#line 498.1 "tiger_pp.lex.sml"*)
 end
| 45 => let val yytext=yymktext() in (*#line 96.11 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.FOR (!lineNo, !posInLine)
    end(*#line 504.1 "tiger_pp.lex.sml"*)
 end
| 48 => let val yytext=yymktext() in (*#line 102.10 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.ASSIGN (!lineNo, !posInLine)
    end(*#line 510.1 "tiger_pp.lex.sml"*)
 end
| 51 => let val yytext=yymktext() in (*#line 108.10 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.TO (!lineNo, !posInLine)
    end(*#line 516.1 "tiger_pp.lex.sml"*)
 end
| 54 => let val yytext=yymktext() in (*#line 114.14 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.ID (yytext, !lineNo, !posInLine)
    end(*#line 522.1 "tiger_pp.lex.sml"*)
 end
| 56 => let val yytext=yymktext() in (*#line 120.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.ADD (!lineNo, !posInLine)
    end(*#line 528.1 "tiger_pp.lex.sml"*)
 end
| 58 => let val yytext=yymktext() in (*#line 126.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.SUB (!lineNo, !posInLine)
    end(*#line 534.1 "tiger_pp.lex.sml"*)
 end
| 60 => let val yytext=yymktext() in (*#line 132.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.MUL (!lineNo, !posInLine)
    end(*#line 540.1 "tiger_pp.lex.sml"*)
 end
| 62 => let val yytext=yymktext() in (*#line 138.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.DIV (!lineNo, !posInLine)
    end(*#line 546.1 "tiger_pp.lex.sml"*)
 end
| 64 => let val yytext=yymktext() in (*#line 144.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.EQ (!lineNo, !posInLine)
    end(*#line 552.1 "tiger_pp.lex.sml"*)
 end
| 67 => let val yytext=yymktext() in (*#line 150.10 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.NE (!lineNo, !posInLine)
    end(*#line 558.1 "tiger_pp.lex.sml"*)
 end
| 7 => let val yytext=yymktext() in (*#line 42.17 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (8 * (size yytext))
    in
        lex()
    end(*#line 564.1 "tiger_pp.lex.sml"*)
 end
| 70 => let val yytext=yymktext() in (*#line 156.10 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.GE (!lineNo, !posInLine)
    end(*#line 570.1 "tiger_pp.lex.sml"*)
 end
| 73 => let val yytext=yymktext() in (*#line 162.10 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.LE (!lineNo, !posInLine)
    end(*#line 576.1 "tiger_pp.lex.sml"*)
 end
| 75 => let val yytext=yymktext() in (*#line 168.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.G (!lineNo, !posInLine)
    end(*#line 582.1 "tiger_pp.lex.sml"*)
 end
| 77 => let val yytext=yymktext() in (*#line 175.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.L (!lineNo, !posInLine)
    end(*#line 588.1 "tiger_pp.lex.sml"*)
 end
| 79 => let val yytext=yymktext() in (*#line 181.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.AND (!lineNo, !posInLine)
    end(*#line 594.1 "tiger_pp.lex.sml"*)
 end
| 81 => let val yytext=yymktext() in (*#line 188.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.OR (!lineNo, !posInLine)
    end(*#line 600.1 "tiger_pp.lex.sml"*)
 end
| 83 => let val yytext=yymktext() in (*#line 194.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.LEFT_B (!lineNo, !posInLine)
    end(*#line 606.1 "tiger_pp.lex.sml"*)
 end
| 85 => let val yytext=yymktext() in (*#line 200.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.RIGHT_B (!lineNo, !posInLine)
    end(*#line 612.1 "tiger_pp.lex.sml"*)
 end
| 87 => let val yytext=yymktext() in (*#line 206.9 "tiger_pp.lex"*)let
        val _ = inc_n posInLine (size yytext)
    in
        Tokens.SEMI (!lineNo, !posInLine)
    end(*#line 618.1 "tiger_pp.lex.sml"*)
 end
| 89 => ((*#line 212.7 "tiger_pp.lex"*)let
    val _ = print ("Syntax error on line " ^ (Int.toString (!lineNo)) ^ " and " ^ (Int.toString (!posInLine)) ^ " char\n")
    in
        raise SyntaxError
    end(*#line 624.1 "tiger_pp.lex.sml"*)
)
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (String.size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := String.substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := String.size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if String.substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
