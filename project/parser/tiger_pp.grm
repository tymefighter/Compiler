
%%

%eop EOF
%verbose
%pure
%name Tiger

%term INT of string
    | STR of string
    | ID of string
    | NIL
    | ADD
    | SUB
    | MUL
    | DIV
    | EQ
    | NE
    | G
    | L
    | GE
    | LE
    | AND
    | OR
    | LEFT_B
    | RIGHT_B
    | SEMI
    | EOF
    | IF
    | THEN
    | ELSE
    | WHILE
    | DO
    | FOR
    | ASSIGN
    | TO

%nonterm EXP of Ast.Exp
    | PROG of Ast.Prog
    | EXPS of Ast.Exp list

%noshift EOF

%left OR
%left AND
%left EQ NE G L GE LE
%left ADD SUB
%left MUL DIV

%pos int

%%

PROG : EXP (Ast.Expression EXP)

EXPS : EXP ([EXP])
    | EXP SEMI EXPS (EXP :: EXPS)

EXP : NIL (Ast.LiteralNil)
    | INT (Ast.LiteralInt INT)
    | STR (Ast.LiteralStr STR)

    | EXP ADD EXP (Ast.Op (EXP1, Ast.ADD, EXP2))
    | EXP SUB EXP (Ast.Op (EXP1, Ast.SUB, EXP2))
    | EXP MUL EXP (Ast.Op (EXP1, Ast.MUL, EXP2))
    | EXP DIV EXP (Ast.Op (EXP1, Ast.DIV, EXP2))
    | EXP EQ EXP (Ast.Op (EXP1, Ast.EQ, EXP2))
    | EXP NE EXP (Ast.Op (EXP1, Ast.NE, EXP2))
    | EXP G EXP (Ast.Op (EXP1, Ast.G, EXP2))
    | EXP L EXP (Ast.Op (EXP1, Ast.L, EXP2))
    | EXP GE EXP (Ast.Op (EXP1, Ast.GE, EXP2))
    | EXP LE EXP (Ast.Op (EXP1, Ast.LE, EXP2))
    | EXP AND EXP (Ast.Op (EXP1, Ast.AND, EXP2))
    | EXP OR EXP (Ast.Op (EXP1, Ast.OR, EXP2))
    | SUB EXP (Ast.NegExp EXP)
    | LEFT_B EXPS RIGHT_B (Ast.Exprs EXPS)
 
    | IF EXP THEN EXP (Ast.IfThen (EXP1, EXP2))
    | IF EXP THEN EXP ELSE EXP (Ast.IfThenElse (EXP1, EXP2, EXP3))

    | WHILE EXP DO EXP (Ast.While (EXP1, EXP2))
    | FOR ID ASSIGN EXP TO EXP DO EXP (Ast.For (ID, EXP1, EXP2, EXP3))