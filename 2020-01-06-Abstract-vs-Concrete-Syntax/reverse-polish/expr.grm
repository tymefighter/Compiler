(* This is the preamble where you can have arbitrary sml code. For us
it is empty *)

%%

%eop EOF
%verbose
%pure
%name Expr

(* The terminals or tokens of the language *)
%term CONST of int
    | PLUS
    | MINUS
    | MUL
    | DIV
    | LEFT_B
    | RIGHT_B
    | EOF
    | NEWLINE

(* The nonterminals of the language *)
%nonterm F of Ast.Expr
        | T of Ast.Expr
        | EXP     of Ast.Expr
       | EXPS    of Ast.Expr list
       | PROGRAM of Ast.Expr list

%noshift EOF
(*

Operator precedence and associativity. The %left says the operator is
left associative and the precedence increase as you go down this list.

*)

%left PLUS MINUS  (* + and - are of same precedence *)
%left MUL DIV        (* higher than + and -            *)

(* The type that captures position in the input *)
%pos int

%%

PROGRAM : EXPS                 ( EXPS )
	| EXPS NEWLINE         ( EXPS )

EXPS    : (* empty *)          ( []                  )
	| EXP NEWLINE EXPS     ( EXP :: EXPS         )

EXP     : T                    ( T )
        | EXP PLUS T           ( Ast.plus EXP1 T1 )
        | EXP MINUS T          ( Ast.minus EXP1 T1 )

T       : F                    ( F )
        | T MUL F              ( Ast.mul T1 F1 )
        | T DIV F              ( Ast.divide T1 F1 )

F       : CONST                ( Ast.Const CONST)
        | LEFT_B EXP RIGHT_B   ( EXP )